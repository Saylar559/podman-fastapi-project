.PHONY: up down restart logs purge ensure-env wait-for-backend wait-for-frontend open-browser show-summary kill-port restart-frontend

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ podman-compose.yml
BACKEND_SERVICE := $(shell grep -E '^[[:space:]]*[A-Za-z0-9_-]+:' podman-compose.yml 2>/dev/null \
    | grep -iE 'api|backend|fastapi' | head -n1 | sed 's/://;s/^[[:space:]]*//')
FRONTEND_SERVICE := $(shell grep -E '^[[:space:]]*[A-Za-z0-9_-]+:' podman-compose.yml 2>/dev/null \
    | grep -iE 'front|react|ui|web'  | head -n1 | sed 's/://;s/^[[:space:]]*//')

# URL –¥–ª—è healthcheck –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
BACKEND_HEALTHCHECK_URL := http://localhost:8000/health
FRONTEND_URL            := http://localhost:3000
SWAGGER_URL             := http://localhost:8000/docs

# –ß—Ç–µ–Ω–∏–µ DEBUG –∏–∑ .env (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
DEBUG_MODE := $(shell grep -E '^DEBUG=' fastapi-app/.env 2>/dev/null | cut -d'=' -f2 || echo False)

# –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
ensure-env:
	@if [ ! -f fastapi-app/.env ]; then \
		echo "üìù –°–æ–∑–¥–∞—é fastapi-app/.env..."; \
		mkdir -p fastapi-app; \
		cat > fastapi-app/.env << 'EOF' \
POSTGRES_USER=postgres \
POSTGRES_PASSWORD=postgres \
POSTGRES_DB=app_db \
POSTGRES_HOST=db \
POSTGRES_PORT=5432 \
 \
SECRET_KEY=supersecretkey123 \
ALGORITHM=HS256 \
ACCESS_TOKEN_EXPIRE_MINUTES=30 \
DEBUG=True \
EOF; \
		echo "‚úÖ fastapi-app/.env —Å–æ–∑–¥–∞–Ω"; \
	fi

# –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ 8000 –∏ 3000
kill-port:
	@for PORT in 8000 3000; do \
		PID=$$(lsof -ti:$$PORT 2>/dev/null || echo ""); \
		if [ -n "$$PID" ]; then \
			echo "üõë –û—Å–≤–æ–±–æ–∂–¥–∞—é –ø–æ—Ä—Ç $$PORT (PID $$PID)..."; \
			kill -9 $$PID 2>/dev/null || true; \
		else \
			echo "‚úÖ –ü–æ—Ä—Ç $$PORT —Å–≤–æ–±–æ–¥–µ–Ω"; \
		fi; \
	done

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞
wait-for-backend:
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞ ($(BACKEND_HEALTHCHECK_URL))..."; \
	for i in $$(seq 1 60); do \
		RES=$$(curl -s -m 1 "$(BACKEND_HEALTHCHECK_URL)" 2>/dev/null || echo ""); \
		if echo "$$RES" | grep -q '"status"[[:space:]]*:[[:space:]]*"ok"'; then \
			echo "‚úÖ –ë—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤: $$RES"; exit 0; \
		fi; \
		sleep 1; \
	done; \
	echo "‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"; \
	echo "üìú –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞:"; \
	podman-compose logs --tail=80 $(BACKEND_SERVICE) 2>/dev/null || true; \
	exit 1

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
wait-for-frontend:
	@if [ -n "$(FRONTEND_SERVICE)" ]; then \
		echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ($(FRONTEND_URL))..."; \
		for i in $$(seq 1 90); do \
			CODE=$$(curl -s -o /dev/null -w "%{http_code}" "$(FRONTEND_URL)" 2>/dev/null || echo 000); \
			if [ "$$CODE" = "200" ] || [ "$$CODE" = "301" ] || [ "$$CODE" = "302" ]; then \
				echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $$CODE)"; break; \
			fi; \
			sleep 1; \
		done; \
		if [ "$$i" = "90" ]; then \
			echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"; \
			podman-compose logs --tail=120 $(FRONTEND_SERVICE) 2>/dev/null || true; \
			exit 1; \
		fi; \
	else \
		echo "‚ÑπÔ∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"; \
	fi

# –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ (Frontend + Swagger –ø—Ä–∏ DEBUG=True)
open-browser:
	@echo "üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä..."; \
	python3 << 'EOF' \
import webbrowser \
frontend = "$(FRONTEND_URL)" \
swagger = "$(SWAGGER_URL)" \
debug_mode = "$(DEBUG_MODE)".strip().lower() == "true" \
urls = [frontend] \
if debug_mode: \
    urls.append(swagger) \
for url in urls: \
    webbrowser.open_new_tab(url) \
print("‚úÖ –û—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:", ", ".join(urls)) \
EOF

# –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
show-summary:
	@echo ""; \
	echo "üìä –°–≤–æ–¥–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"; \
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
	podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null | \
		grep -E "$(BACKEND_SERVICE)|$(FRONTEND_SERVICE)" 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"; \
	echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"; \
	echo "üåê API:   $(BACKEND_HEALTHCHECK_URL)"; \
	if [ "$(DEBUG_MODE)" = "True" ]; then echo "üìú Swagger: $(SWAGGER_URL)"; fi; \
	echo "üåê Front: $(FRONTEND_URL)"; \
	echo ""

# –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
up: ensure-env kill-port
	@if [ -z "$(BACKEND_SERVICE)" ]; then \
		echo "‚ùå –°–µ—Ä–≤–∏—Å –±—ç–∫–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; \
	fi; \
	echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."; \
	podman-compose up --build -d; \
	$(MAKE) wait-for-backend; \
	if [ -n "$(FRONTEND_SERVICE)" ]; then $(MAKE) wait-for-frontend; fi; \
	$(MAKE) open-browser; \
	$(MAKE) show-summary; \
	echo "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
down:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞..."; \
	podman-compose down -t 0 --remove-orphans

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart: down up

# –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞
logs:
	@if [ -n "$(BACKEND_SERVICE)" ]; then \
		podman-compose logs -f $(BACKEND_SERVICE); \
	else \
		echo "‚ùå –°–µ—Ä–≤–∏—Å –±—ç–∫–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"; \
	fi

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Podman
purge:
	@echo "üî• –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Podman..."; \
	podman rm -f $$(podman ps -aq) 2>/dev/null || true; \
	podman pod rm -f $$(podman pod ps -q) 2>/dev/null || true; \
	podman network prune -f 2>/dev/null || true; \
	podman image prune -af 2>/dev/null || true

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
restart-frontend:
	@if [ -n "$(FRONTEND_SERVICE)" ]; then \
		echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ($(FRONTEND_SERVICE))..."; \
		podman-compose restart $(FRONTEND_SERVICE); \
		$(MAKE) wait-for-frontend; \
		echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"; \
	else \
		echo "‚ùå –°–µ—Ä–≤–∏—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ podman-compose.yml"; \
		exit 1; \
	fi
logs-frontend:
	@if [ -n "$(FRONTEND_SERVICE)" ]; then \
		podman-compose logs -f $(FRONTEND_SERVICE); \
	else \
		echo "‚ùå –°–µ—Ä–≤–∏—Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ podman-compose.yml"; \
	fi
