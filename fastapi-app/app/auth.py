import logging
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status, Response, Cookie
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from passlib.exc import UnknownHashError, MalformedHashError

from app import models
from app.models import UserRole
from app.db import get_db
from app.core.config import ACCESS_TOKEN_EXPIRE_MINUTES
from app.token_utils import create_access_token, create_refresh_token, decode_token

router = APIRouter(tags=["auth"])

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/login")
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è refresh‚Äëcookie
REFRESH_COOKIE_NAME = "refresh_token"
REFRESH_COOKIE_MAX_AGE = 7 * 24 * 3600  # 7 –¥–Ω–µ–π


def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)


def safe_verify_password(plain: str, hashed: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∏—Ç—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ö—ç—à–µ–π."""
    try:
        return pwd_context.verify(plain, hashed)
    except (ValueError, UnknownHashError, MalformedHashError) as e:
        logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return False


def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db)
) -> models.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        headers={"WWW-Authenticate": "Bearer"},
    )
    payload = decode_token(token)
    if not payload:
        raise credentials_exception

    user_id: str | None = payload.get("sub")
    if not user_id:
        raise credentials_exception

    user = db.get(models.User, int(user_id))
    if not user:
        raise credentials_exception
    return user


def get_current_admin(current_user: models.User = Depends(get_current_user)) -> models.User:
    if current_user.role != UserRole.admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å admin"
        )
    return current_user


def get_current_buh(current_user: models.User = Depends(get_current_user)) -> models.User:
    if current_user.role != UserRole.buh_user:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å buh_user"
        )
    return current_user


@router.post("/login")
async def login(
    response: Response,
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    user = db.query(models.User).filter_by(username=form_data.username).first()
    if not user:
        logging.info(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {form_data.username}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # –ê–≤—Ç–æ—Ñ–∏–∫—Å –±–∏—Ç–æ–≥–æ —Ö—ç—à–∞
    if not user.hashed_password or not user.hashed_password.startswith("$2b$") or len(user.hashed_password) != 60:
        logging.warning(f"‚ôª –ë–∏—Ç—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ö—ç—à —É {user.username} ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º")
        user.hashed_password = get_password_hash(form_data.password)
        try:
            db.commit()
        except Exception as e:
            db.rollback()
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ –¥–ª—è {user.username}: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if not safe_verify_password(form_data.password, user.hashed_password):
        logging.info(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {form_data.username}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )

    role = user.role.value  # ‚úÖ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.last_login = datetime.utcnow()
    try:
        db.commit()
    except Exception as e:
        db.rollback()
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ last_login –¥–ª—è {user.username}: {e}")

    access_token = create_access_token(
        {"sub": str(user.id), "role": role},
        expires_minutes=ACCESS_TOKEN_EXPIRE_MINUTES
    )
    refresh_token = create_refresh_token({"sub": str(user.id), "role": role})

    response.set_cookie(
        key=REFRESH_COOKIE_NAME,
        value=refresh_token,
        httponly=True,
        secure=False,  # ‚ö†Ô∏è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ True
        samesite="lax",
        max_age=REFRESH_COOKIE_MAX_AGE
    )

    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É —Å —Ä–æ–ª—å—é {role}")

    return {
        "access_token": access_token,
        "token_type": "bearer",
        "role": role
    }


@router.post("/refresh")
async def refresh_token_endpoint(
    response: Response,
    refresh_token: str | None = Cookie(default=None),
    db: Session = Depends(get_db)
):
    if not refresh_token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )

    payload = decode_token(refresh_token)
    if not payload:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π refresh token"
        )

    user_id: str | None = payload.get("sub")
    role: str | None = payload.get("role")
    if not user_id or not role:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π refresh token"
        )

    user = db.get(models.User, int(user_id))
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    new_access = create_access_token(
        {"sub": str(user.id), "role": role},
        expires_minutes=ACCESS_TOKEN_EXPIRE_MINUTES
    )
    new_refresh = create_refresh_token({"sub": str(user.id), "role": role})

    response.set_cookie(
        key=REFRESH_COOKIE_NAME,
        value=new_refresh,
        httponly=True,
        secure=False,   # ‚ö†Ô∏è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ True
        samesite="lax",
        max_age=REFRESH_COOKIE_MAX_AGE
    )

    logging.info(f"‚ôª Refresh —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")

    return {
        "access_token": new_access,
        "token_type": "bearer",
        "role": role,
        "username": user.username  # üëà —É–¥–æ–±–Ω–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
    }
