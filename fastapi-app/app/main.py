import logging
import os
from fastapi import FastAPI, Request, Depends, HTTPException
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session

from app import auth, admin_routes, buh_routes, models
from app.db import engine, SessionLocal, get_db
from app.auth import get_password_hash, get_current_user
from app.models import UserRole
from app.core import config
from app.api import excel
from app.routers import users

# 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# 2. FastAPI
app = FastAPI(title="Podman FastAPI Project", version="1.0.0")

# 3. CORS
origins = getattr(config, "CORS_ORIGINS", [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://frontend:3000",
])
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 4. –°–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.get("/api/health", include_in_schema=False)
@app.get("/health", include_in_schema=False)
async def health_check():
    return {"status": "ok"}

@app.get("/api/ping")
async def ping():
    return {"ok": True}

@app.get("/api/me")
async def get_me(current_user=Depends(get_current_user)):
    return {
        "id": current_user.id,
        "username": current_user.username,
        "email": current_user.email,
        "role": current_user.role,
    }

# favicon
@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    frontend_dir = os.path.join(os.path.dirname(__file__), "..", "frontend", "build")
    path = os.path.join(frontend_dir, "favicon.ico")
    if os.path.exists(path):
        return FileResponse(path)
    return JSONResponse(status_code=404, content={"detail": "favicon not found"})

# 5. Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"‚û°Ô∏è {request.method} {request.url.path}")
    try:
        response = await call_next(request)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {request.method} {request.url.path}: {e}")
        return JSONResponse(status_code=500, content={"detail": "Internal Server Error"})
    logger.info(f"‚¨ÖÔ∏è {request.method} {request.url.path} -> {response.status_code}")
    return response

# 6. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(status_code=exc.status_code, content={"detail": exc.detail})

@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    logger.exception("Unhandled exception")
    return JSONResponse(status_code=500, content={"detail": "Internal Server Error"})

# 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    models.Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

def init_user(username: str, password: str, role: str, email: str):
    with SessionLocal() as db:
        user = db.query(models.User).filter_by(username=username).first()
        try:
            role_enum = UserRole(role)
        except ValueError:
            logger.error(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            return
        if not user:
            db.add(models.User(
                username=username,
                email=email,
                hashed_password=get_password_hash(password),
                role=role_enum
            ))
            db.commit()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {username} / {role}")
        else:
            updated = False
            if not user.hashed_password or not user.hashed_password.startswith("$2b$") or len(user.hashed_password) != 60:
                user.hashed_password = get_password_hash(password)
                updated = True
                logger.info(f"‚ôª –ü–∞—Ä–æ–ª—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –¥–ª—è {username}")
            if user.role != role_enum:
                user.role = role_enum
                updated = True
                logger.info(f"‚ôª –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {username} -> {role}")
            if not user.email:
                user.email = email
                updated = True
                logger.info(f"‚ôª Email –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {username}")
            if updated:
                db.commit()
            logger.info(f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–æ–≤–µ—Ä–µ–Ω")

def fix_all_hashes():
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–µ–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    with SessionLocal() as db:
        users = db.query(models.User).all()
        for user in users:
            if not user.hashed_password or not user.hashed_password.startswith("$2b$") or len(user.hashed_password) != 60:
                logger.warning(f"‚ôª –ë–∏—Ç—ã–π —Ö—ç—à —É {user.username} ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º")
                default_passwords = {"admin": "lomavius", "buhgalter": "balance1"}
                new_password = default_passwords.get(user.username, "changeme123")
                user.hashed_password = get_password_hash(new_password)
                db.commit()
                logger.info(f"‚úÖ –•—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {user.username}")
    logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@app.on_event("startup")
def startup_event():
    logger.info(f"üì° DATABASE_URL: {getattr(config, 'DATABASE_URL', '–Ω–µ –∑–∞–¥–∞–Ω')}")
    init_user("admin", "lomavius", "admin", "admin@example.com")
    init_user("buhgalter", "balance1", "buh_user", "buh@example.com")
    fix_all_hashes()

# 8. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.include_router(auth.router, prefix="/api")
app.include_router(admin_routes.router, prefix="/api")
app.include_router(buh_routes.router, prefix="/api")
app.include_router(excel.router, prefix="/api")
app.include_router(users.router, prefix="/api")

# 9. –†–∞–∑–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–∞ (–µ—Å–ª–∏ —Å–æ–±—Ä–∞–Ω React)
frontend_build = os.path.join(os.path.dirname(__file__), "..", "frontend", "build")
if os.path.exists(frontend_build):
    app.mount("/static", StaticFiles(directory=os.path.join(frontend_build, "static")), name="static")

    @app.get("/{full_path:path}", include_in_schema=False)
    async def spa_fallback(full_path: str):
        index_path = os.path.join(frontend_build, "index.html")
        if os.path.exists(index_path):
            return FileResponse(index_path)
        return JSONResponse(status_code=404, content={"detail": "Not Found"})

# 10. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
for route in app.router.routes:
    methods = ",".join(route.methods) if route.methods else ""
    tags = getattr(route, "tags", [])
    logger.info(f"[{methods}] {route.path} (tags={tags})")
