import io
import os
import logging
from zipfile import BadZipFile
from typing import List, Tuple, Optional

import pandas as pd

logger = logging.getLogger(__name__)

# –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π ‚Üí –ì–æ—Ä–∏–∑–æ–Ω—Ç—ã (—Å –ø–æ–ª–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º)
PERMIT_MAPPING = {
    '91-RU93308000-2132-2022': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç –≠—Å–∫—Ä–æ—É "–ì–æ—Ä–∏–∑–æ–Ω—Ç 1"',
    '91-RU93308000-2775-2023': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç –≠—Å–∫—Ä–æ—É "–ì–æ—Ä–∏–∑–æ–Ω—Ç 2"',
    '91-RU93308000-3161-2023': '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç –≠—Å–∫—Ä–æ—É "–ì–æ—Ä–∏–∑–æ–Ω—Ç 3"',
}


def find_column(columns: pd.Index, candidates: List[str]) -> Optional[str]:
    """–ò—â–µ—Ç –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ª—é–±—É—é –∏–∑ –ø–æ–¥—Å—Ç—Ä–æ–∫ candidates (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)."""
    for cand in candidates:
        for col in columns:
            if cand.lower() in str(col).lower():
                return col
    return None


def analyze_excel_files(
    excel_files: List[Tuple[str, io.BytesIO]],
    year: int = None,
    month: int = None,
    filter_by_period: bool = True,
    exclude_negative: bool = True,
):
    """
    –ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ Excel-—Ñ–∞–π–ª–æ–≤.

    Parameters:
    - excel_files: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (filename, BytesIO).
    - year, month: –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É (YYYY-MM).
    - filter_by_period: –µ—Å–ª–∏ True, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É.
    - exclude_negative: –µ—Å–ª–∏ True, –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - result_df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞", "–°—É–º–º–∞"].
    - error_df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞", "–ü—Ä–∏—á–∏–Ω–∞"].
    """
    results = []
    errors = []

    for filename, buf in excel_files:
        try:
            buf.seek(0)
            try:
                sheets = pd.read_excel(buf, sheet_name=None, skiprows=6, engine="openpyxl")
            except BadZipFile:
                buf.seek(0)
                sheets = pd.read_excel(buf, sheet_name=None, skiprows=6, engine="xlrd")

            processed_any = False
            base_name = os.path.splitext(filename)[0]   # —É–±–∏—Ä–∞–µ–º .xlsx/.xls
            default_name = f'–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç –≠—Å–∫—Ä–æ—É {base_name}'

            for sheet_name, df in sheets.items():
                if df.empty:
                    continue

                df.columns = df.columns.astype(str).str.strip()
                sum_col = find_column(df.columns, ["—Å—É–º–º", "amount"])
                if not sum_col:
                    errors.append({
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞": f"{default_name} ({sheet_name})",
                        "–ü—Ä–∏—á–∏–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å—É–º–º—ã"
                    })
                    continue

                df[sum_col] = pd.to_numeric(df[sum_col], errors="coerce").fillna(0)

                if exclude_negative:
                    df = df[df[sum_col] >= 0]

                # üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
                if filter_by_period and year and month:
                    date_col = find_column(df.columns, ["–¥–∞—Ç", "period"])
                    if date_col:
                        df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
                        df = df[
                            (df[date_col].dt.year == year) &
                            (df[date_col].dt.month == month)
                        ]
                    else:
                        logger.warning("–§–∞–π–ª %s –ª–∏—Å—Ç %s: –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É",
                                       filename, sheet_name)

                if df.empty:
                    continue

                processed_any = True

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ" ‚Üí –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–º
                if "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ" in df.columns:
                    df["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞"] = df["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"].map(PERMIT_MAPPING)
                    df["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞"] = df["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞"].fillna(default_name)
                    grouped = df.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞").agg({sum_col: "sum"}).reset_index()
                    for _, row in grouped.iterrows():
                        results.append({
                            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞": row["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞"],
                            "–°—É–º–º–∞": float(row[sum_col])   # ‚Üê —á–∏—Å–ª–æ
                        })
                else:
                    total_sum = df[sum_col].sum()
                    results.append({
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞": default_name,
                        "–°—É–º–º–∞": float(total_sum)        # ‚Üê —á–∏—Å–ª–æ
                    })

            if not processed_any:
                results.append({"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞": default_name, "–°—É–º–º–∞": 0.0})

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ %s", filename, exc_info=True)
            errors.append({"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞": filename, "–ü—Ä–∏—á–∏–Ω–∞": f"–û—à–∏–±–∫–∞: {e}"})

    result_df = pd.DataFrame(results, columns=["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞", "–°—É–º–º–∞"])
    error_df = pd.DataFrame(errors, columns=["–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞", "–ü—Ä–∏—á–∏–Ω–∞"])
    return result_df, error_df
